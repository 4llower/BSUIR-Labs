#!/usr/bin/env python3

import argparse
from local_packages import SupportedSerializers

parser = argparse.ArgumentParser(description="Specify the formats and paths")

# Required args
parser.add_argument('--src', help="path to file where placed object which need to convert", type=str)
parser.add_argument('--to', help="destination to file where need to put converted object", type=str)
parser.add_argument('--format', help="format of final object")
parser.add_argument('--primary', help="format of original object")

# Optional args
parser.add_argument('--env', help="path to environment file", type=str)

args = parser.parse_args()

if args.env:
    print('Env loaded')
elif args.src and args.to and args.format and args.primary:
    # Catches SupportedSerializers inconsistency in params
    if args.format not in SupportedSerializers.values() or args.primary not in SupportedSerializers.values():
        print('\033[93m' + 'Choose --format or --primary in supported serializers list:' + '\033[0m')
        print(' | '.join(SupportedSerializers.values()))
        exit(0)

else:
    print('\033[93m' + 'Follow the next instructions:\n' + '\033[0m')
    print('\033[94m' + 'Environment convert options ->' + '\033[0m')
    print('Add the --env option where placed environment file\n')
    print('\033[94m' + 'Flags convert options -> ' + '\033[0m')
    print('Add the flags: \n'
          '--local_packages(destination to initial file, ' + '\033[1m' + '--local_packages ~/file.json)' + '\033[0m\n'
          '--to(destination to target converted file, ' + '\033[1m' + '--to ~/target.toml)' + '\033[0m\n'
          '--format(format of target converted file, --format TOML)\n'
          '--primary(format of initial file, --format JSON)\n')
